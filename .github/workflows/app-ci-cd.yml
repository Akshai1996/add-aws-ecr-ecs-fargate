name: docker-build-deploy
on:
  workflow_dispatch:
  push:
    branches: [ '*' ]
    paths:
      - 'app/**'
      - '.github/workflows/app-ci-cd.yml'
  pull_request:
    branches: ["main"]
    paths:
      - 'app/**'
      - '.github/workflows/app-ci-cd.yml'
env:
  AWS_REGION: us-east-2                   # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: app-4
permissions: read-all
jobs:
  build:
    name: 'continuous-integration'
    runs-on: ubuntu-latest
    environment: development
    permissions:
      contents: read
      id-token: write
      pull-requests: write
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: ./app
    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3
    - name: Generate Image Tag
      id: tag
      run: echo "TAG_NAME=$(date +'%Y%m%d').${{ github.run_number }}.${{ github.run_attempt }}" >> $GITHUB_ENV
    - name: Print Image Tag
      run: echo "Tag Name for the Image ${{ env.TAG_NAME }}"
    # https://github.com/marketplace/actions/configure-aws-credentials-action-for-github-actions
    - name: Configure AWS Credentials Action For GitHub Actions
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.IAM_ROLE }}
        role-session-name: AWSSession
        aws-region: ${{ env.AWS_REGION }}
    # https://github.com/marketplace/actions/amazon-ecr-login-action-for-github-actions
    - name: Login to Amazon ECR Private
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2.0.1
      with:
        mask-password: 'true'
    - name: Build and tag docker image to Amazon ECR
      env:
        REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        REPOSITORY: ${{ env.ECR_REPOSITORY }}
        IMAGE_TAG: ${{ env.TAG_NAME }}
      run: docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
    # https://github.com/marketplace/actions/aqua-security-trivy
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      env:
        REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        REPOSITORY: ${{ env.ECR_REPOSITORY }}
        IMAGE_TAG: ${{ env.TAG_NAME }}
      with:
        image-ref: '${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.TAG_NAME }}'
        format: 'sarif'
        output: 'trivy-results.sarif'
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'
    # Push the Docker image to Amazon ECR, but only if the even is not a pull request.
    - name: Push docker image to Amazon ECR
      env:
        REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        REPOSITORY: ${{ env.ECR_REPOSITORY }}
        IMAGE_TAG: ${{ env.TAG_NAME }}
      run: docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
      if: github.event_name != 'pull_request'
    - name: Create output file
      id: create-output
      run: echo "IMAGE_ID=$REGISTRY/$REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
    outputs:
      image-id: ${{ steps.create-output.outputs.image-id }}
  deploy:
    needs: build
    name: 'continuous-deployment'
    runs-on: ubuntu-latest
    environment: development
    env:
      IMAGE_ID: ${{ needs.build.outputs.image-id }}
    permissions:
      contents: read
      id-token: write
      pull-requests: write
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: ./app
    steps:
    - name: Print Image Tag
      run: echo "Tag Name for the Image ${{ env.IMAGE_ID }}"